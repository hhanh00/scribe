// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  CResultBytes transcribe_file(
    ffi.Pointer<ffi.Char> audio_filename,
  ) {
    return _transcribe_file(
      audio_filename,
    );
  }

  late final _transcribe_filePtr =
      _lookup<ffi.NativeFunction<CResultBytes Function(ffi.Pointer<ffi.Char>)>>(
          'transcribe_file');
  late final _transcribe_file = _transcribe_filePtr
      .asFunction<CResultBytes Function(ffi.Pointer<ffi.Char>)>();
}

final class CResult extends ffi.Struct {
  external ffi.Pointer<ffi.Char> error;
}

final class CResultBytes extends ffi.Struct {
  external ffi.Pointer<ffi.Char> error;

  @ffi.Uint32()
  external int len;

  external ffi.Pointer<ffi.Uint8> value;
}
